// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "messages_robocup_ssl_geometry.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* SSL_GeometryFieldSize_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SSL_GeometryFieldSize_reflection_ = NULL;
const ::google::protobuf::Descriptor* SSL_GeometryCameraCalibration_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SSL_GeometryCameraCalibration_reflection_ = NULL;
const ::google::protobuf::Descriptor* SSL_GeometryData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SSL_GeometryData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_messages_5frobocup_5fssl_5fgeometry_2eproto() {
  protobuf_AddDesc_messages_5frobocup_5fssl_5fgeometry_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "messages_robocup_ssl_geometry.proto");
  GOOGLE_CHECK(file != NULL);
  SSL_GeometryFieldSize_descriptor_ = file->message_type(0);
  static const int SSL_GeometryFieldSize_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_GeometryFieldSize, line_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_GeometryFieldSize, field_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_GeometryFieldSize, field_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_GeometryFieldSize, boundary_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_GeometryFieldSize, referee_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_GeometryFieldSize, goal_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_GeometryFieldSize, goal_depth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_GeometryFieldSize, goal_wall_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_GeometryFieldSize, center_circle_radius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_GeometryFieldSize, defense_radius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_GeometryFieldSize, defense_stretch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_GeometryFieldSize, free_kick_from_defense_dist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_GeometryFieldSize, penalty_spot_from_field_line_dist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_GeometryFieldSize, penalty_line_from_spot_dist_),
  };
  SSL_GeometryFieldSize_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SSL_GeometryFieldSize_descriptor_,
      SSL_GeometryFieldSize::default_instance_,
      SSL_GeometryFieldSize_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_GeometryFieldSize, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_GeometryFieldSize, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SSL_GeometryFieldSize));
  SSL_GeometryCameraCalibration_descriptor_ = file->message_type(1);
  static const int SSL_GeometryCameraCalibration_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_GeometryCameraCalibration, camera_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_GeometryCameraCalibration, focal_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_GeometryCameraCalibration, principal_point_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_GeometryCameraCalibration, principal_point_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_GeometryCameraCalibration, distortion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_GeometryCameraCalibration, q0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_GeometryCameraCalibration, q1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_GeometryCameraCalibration, q2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_GeometryCameraCalibration, q3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_GeometryCameraCalibration, tx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_GeometryCameraCalibration, ty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_GeometryCameraCalibration, tz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_GeometryCameraCalibration, derived_camera_world_tx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_GeometryCameraCalibration, derived_camera_world_ty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_GeometryCameraCalibration, derived_camera_world_tz_),
  };
  SSL_GeometryCameraCalibration_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SSL_GeometryCameraCalibration_descriptor_,
      SSL_GeometryCameraCalibration::default_instance_,
      SSL_GeometryCameraCalibration_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_GeometryCameraCalibration, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_GeometryCameraCalibration, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SSL_GeometryCameraCalibration));
  SSL_GeometryData_descriptor_ = file->message_type(2);
  static const int SSL_GeometryData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_GeometryData, field_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_GeometryData, calib_),
  };
  SSL_GeometryData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SSL_GeometryData_descriptor_,
      SSL_GeometryData::default_instance_,
      SSL_GeometryData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_GeometryData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_GeometryData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SSL_GeometryData));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_messages_5frobocup_5fssl_5fgeometry_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SSL_GeometryFieldSize_descriptor_, &SSL_GeometryFieldSize::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SSL_GeometryCameraCalibration_descriptor_, &SSL_GeometryCameraCalibration::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SSL_GeometryData_descriptor_, &SSL_GeometryData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_messages_5frobocup_5fssl_5fgeometry_2eproto() {
  delete SSL_GeometryFieldSize::default_instance_;
  delete SSL_GeometryFieldSize_reflection_;
  delete SSL_GeometryCameraCalibration::default_instance_;
  delete SSL_GeometryCameraCalibration_reflection_;
  delete SSL_GeometryData::default_instance_;
  delete SSL_GeometryData_reflection_;
}

void protobuf_AddDesc_messages_5frobocup_5fssl_5fgeometry_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n#messages_robocup_ssl_geometry.proto\"\212\003"
    "\n\025SSL_GeometryFieldSize\022\022\n\nline_width\030\001 "
    "\002(\005\022\024\n\014field_length\030\002 \002(\005\022\023\n\013field_width"
    "\030\003 \002(\005\022\026\n\016boundary_width\030\004 \002(\005\022\025\n\rrefere"
    "e_width\030\005 \002(\005\022\022\n\ngoal_width\030\006 \002(\005\022\022\n\ngoa"
    "l_depth\030\007 \002(\005\022\027\n\017goal_wall_width\030\010 \002(\005\022\034"
    "\n\024center_circle_radius\030\t \002(\005\022\026\n\016defense_"
    "radius\030\n \002(\005\022\027\n\017defense_stretch\030\013 \002(\005\022#\n"
    "\033free_kick_from_defense_dist\030\014 \002(\005\022)\n!pe"
    "nalty_spot_from_field_line_dist\030\r \002(\005\022#\n"
    "\033penalty_line_from_spot_dist\030\016 \002(\005\"\311\002\n\035S"
    "SL_GeometryCameraCalibration\022\021\n\tcamera_i"
    "d\030\001 \002(\r\022\024\n\014focal_length\030\002 \002(\002\022\031\n\021princip"
    "al_point_x\030\003 \002(\002\022\031\n\021principal_point_y\030\004 "
    "\002(\002\022\022\n\ndistortion\030\005 \002(\002\022\n\n\002q0\030\006 \002(\002\022\n\n\002q"
    "1\030\007 \002(\002\022\n\n\002q2\030\010 \002(\002\022\n\n\002q3\030\t \002(\002\022\n\n\002tx\030\n "
    "\002(\002\022\n\n\002ty\030\013 \002(\002\022\n\n\002tz\030\014 \002(\002\022\037\n\027derived_c"
    "amera_world_tx\030\r \001(\002\022\037\n\027derived_camera_w"
    "orld_ty\030\016 \001(\002\022\037\n\027derived_camera_world_tz"
    "\030\017 \001(\002\"h\n\020SSL_GeometryData\022%\n\005field\030\001 \002("
    "\0132\026.SSL_GeometryFieldSize\022-\n\005calib\030\002 \003(\013"
    "2\036.SSL_GeometryCameraCalibration", 872);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "messages_robocup_ssl_geometry.proto", &protobuf_RegisterTypes);
  SSL_GeometryFieldSize::default_instance_ = new SSL_GeometryFieldSize();
  SSL_GeometryCameraCalibration::default_instance_ = new SSL_GeometryCameraCalibration();
  SSL_GeometryData::default_instance_ = new SSL_GeometryData();
  SSL_GeometryFieldSize::default_instance_->InitAsDefaultInstance();
  SSL_GeometryCameraCalibration::default_instance_->InitAsDefaultInstance();
  SSL_GeometryData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_messages_5frobocup_5fssl_5fgeometry_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_messages_5frobocup_5fssl_5fgeometry_2eproto {
  StaticDescriptorInitializer_messages_5frobocup_5fssl_5fgeometry_2eproto() {
    protobuf_AddDesc_messages_5frobocup_5fssl_5fgeometry_2eproto();
  }
} static_descriptor_initializer_messages_5frobocup_5fssl_5fgeometry_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int SSL_GeometryFieldSize::kLineWidthFieldNumber;
const int SSL_GeometryFieldSize::kFieldLengthFieldNumber;
const int SSL_GeometryFieldSize::kFieldWidthFieldNumber;
const int SSL_GeometryFieldSize::kBoundaryWidthFieldNumber;
const int SSL_GeometryFieldSize::kRefereeWidthFieldNumber;
const int SSL_GeometryFieldSize::kGoalWidthFieldNumber;
const int SSL_GeometryFieldSize::kGoalDepthFieldNumber;
const int SSL_GeometryFieldSize::kGoalWallWidthFieldNumber;
const int SSL_GeometryFieldSize::kCenterCircleRadiusFieldNumber;
const int SSL_GeometryFieldSize::kDefenseRadiusFieldNumber;
const int SSL_GeometryFieldSize::kDefenseStretchFieldNumber;
const int SSL_GeometryFieldSize::kFreeKickFromDefenseDistFieldNumber;
const int SSL_GeometryFieldSize::kPenaltySpotFromFieldLineDistFieldNumber;
const int SSL_GeometryFieldSize::kPenaltyLineFromSpotDistFieldNumber;
#endif  // !_MSC_VER

SSL_GeometryFieldSize::SSL_GeometryFieldSize()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SSL_GeometryFieldSize::InitAsDefaultInstance() {
}

SSL_GeometryFieldSize::SSL_GeometryFieldSize(const SSL_GeometryFieldSize& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SSL_GeometryFieldSize::SharedCtor() {
  _cached_size_ = 0;
  line_width_ = 0;
  field_length_ = 0;
  field_width_ = 0;
  boundary_width_ = 0;
  referee_width_ = 0;
  goal_width_ = 0;
  goal_depth_ = 0;
  goal_wall_width_ = 0;
  center_circle_radius_ = 0;
  defense_radius_ = 0;
  defense_stretch_ = 0;
  free_kick_from_defense_dist_ = 0;
  penalty_spot_from_field_line_dist_ = 0;
  penalty_line_from_spot_dist_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SSL_GeometryFieldSize::~SSL_GeometryFieldSize() {
  SharedDtor();
}

void SSL_GeometryFieldSize::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SSL_GeometryFieldSize::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SSL_GeometryFieldSize::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SSL_GeometryFieldSize_descriptor_;
}

const SSL_GeometryFieldSize& SSL_GeometryFieldSize::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_5frobocup_5fssl_5fgeometry_2eproto();  return *default_instance_;
}

SSL_GeometryFieldSize* SSL_GeometryFieldSize::default_instance_ = NULL;

SSL_GeometryFieldSize* SSL_GeometryFieldSize::New() const {
  return new SSL_GeometryFieldSize;
}

void SSL_GeometryFieldSize::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    line_width_ = 0;
    field_length_ = 0;
    field_width_ = 0;
    boundary_width_ = 0;
    referee_width_ = 0;
    goal_width_ = 0;
    goal_depth_ = 0;
    goal_wall_width_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    center_circle_radius_ = 0;
    defense_radius_ = 0;
    defense_stretch_ = 0;
    free_kick_from_defense_dist_ = 0;
    penalty_spot_from_field_line_dist_ = 0;
    penalty_line_from_spot_dist_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SSL_GeometryFieldSize::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 line_width = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &line_width_)));
          set_has_line_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_field_length;
        break;
      }
      
      // required int32 field_length = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_field_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &field_length_)));
          set_has_field_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_field_width;
        break;
      }
      
      // required int32 field_width = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_field_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &field_width_)));
          set_has_field_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_boundary_width;
        break;
      }
      
      // required int32 boundary_width = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boundary_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &boundary_width_)));
          set_has_boundary_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_referee_width;
        break;
      }
      
      // required int32 referee_width = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_referee_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &referee_width_)));
          set_has_referee_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_goal_width;
        break;
      }
      
      // required int32 goal_width = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_goal_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &goal_width_)));
          set_has_goal_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_goal_depth;
        break;
      }
      
      // required int32 goal_depth = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_goal_depth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &goal_depth_)));
          set_has_goal_depth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_goal_wall_width;
        break;
      }
      
      // required int32 goal_wall_width = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_goal_wall_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &goal_wall_width_)));
          set_has_goal_wall_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_center_circle_radius;
        break;
      }
      
      // required int32 center_circle_radius = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_center_circle_radius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &center_circle_radius_)));
          set_has_center_circle_radius();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_defense_radius;
        break;
      }
      
      // required int32 defense_radius = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_defense_radius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &defense_radius_)));
          set_has_defense_radius();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_defense_stretch;
        break;
      }
      
      // required int32 defense_stretch = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_defense_stretch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &defense_stretch_)));
          set_has_defense_stretch();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_free_kick_from_defense_dist;
        break;
      }
      
      // required int32 free_kick_from_defense_dist = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_free_kick_from_defense_dist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &free_kick_from_defense_dist_)));
          set_has_free_kick_from_defense_dist();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_penalty_spot_from_field_line_dist;
        break;
      }
      
      // required int32 penalty_spot_from_field_line_dist = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_penalty_spot_from_field_line_dist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &penalty_spot_from_field_line_dist_)));
          set_has_penalty_spot_from_field_line_dist();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_penalty_line_from_spot_dist;
        break;
      }
      
      // required int32 penalty_line_from_spot_dist = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_penalty_line_from_spot_dist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &penalty_line_from_spot_dist_)));
          set_has_penalty_line_from_spot_dist();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SSL_GeometryFieldSize::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 line_width = 1;
  if (has_line_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->line_width(), output);
  }
  
  // required int32 field_length = 2;
  if (has_field_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->field_length(), output);
  }
  
  // required int32 field_width = 3;
  if (has_field_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->field_width(), output);
  }
  
  // required int32 boundary_width = 4;
  if (has_boundary_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->boundary_width(), output);
  }
  
  // required int32 referee_width = 5;
  if (has_referee_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->referee_width(), output);
  }
  
  // required int32 goal_width = 6;
  if (has_goal_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->goal_width(), output);
  }
  
  // required int32 goal_depth = 7;
  if (has_goal_depth()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->goal_depth(), output);
  }
  
  // required int32 goal_wall_width = 8;
  if (has_goal_wall_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->goal_wall_width(), output);
  }
  
  // required int32 center_circle_radius = 9;
  if (has_center_circle_radius()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->center_circle_radius(), output);
  }
  
  // required int32 defense_radius = 10;
  if (has_defense_radius()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->defense_radius(), output);
  }
  
  // required int32 defense_stretch = 11;
  if (has_defense_stretch()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->defense_stretch(), output);
  }
  
  // required int32 free_kick_from_defense_dist = 12;
  if (has_free_kick_from_defense_dist()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->free_kick_from_defense_dist(), output);
  }
  
  // required int32 penalty_spot_from_field_line_dist = 13;
  if (has_penalty_spot_from_field_line_dist()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->penalty_spot_from_field_line_dist(), output);
  }
  
  // required int32 penalty_line_from_spot_dist = 14;
  if (has_penalty_line_from_spot_dist()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->penalty_line_from_spot_dist(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SSL_GeometryFieldSize::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 line_width = 1;
  if (has_line_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->line_width(), target);
  }
  
  // required int32 field_length = 2;
  if (has_field_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->field_length(), target);
  }
  
  // required int32 field_width = 3;
  if (has_field_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->field_width(), target);
  }
  
  // required int32 boundary_width = 4;
  if (has_boundary_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->boundary_width(), target);
  }
  
  // required int32 referee_width = 5;
  if (has_referee_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->referee_width(), target);
  }
  
  // required int32 goal_width = 6;
  if (has_goal_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->goal_width(), target);
  }
  
  // required int32 goal_depth = 7;
  if (has_goal_depth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->goal_depth(), target);
  }
  
  // required int32 goal_wall_width = 8;
  if (has_goal_wall_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->goal_wall_width(), target);
  }
  
  // required int32 center_circle_radius = 9;
  if (has_center_circle_radius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->center_circle_radius(), target);
  }
  
  // required int32 defense_radius = 10;
  if (has_defense_radius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->defense_radius(), target);
  }
  
  // required int32 defense_stretch = 11;
  if (has_defense_stretch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->defense_stretch(), target);
  }
  
  // required int32 free_kick_from_defense_dist = 12;
  if (has_free_kick_from_defense_dist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->free_kick_from_defense_dist(), target);
  }
  
  // required int32 penalty_spot_from_field_line_dist = 13;
  if (has_penalty_spot_from_field_line_dist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->penalty_spot_from_field_line_dist(), target);
  }
  
  // required int32 penalty_line_from_spot_dist = 14;
  if (has_penalty_line_from_spot_dist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->penalty_line_from_spot_dist(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SSL_GeometryFieldSize::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 line_width = 1;
    if (has_line_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->line_width());
    }
    
    // required int32 field_length = 2;
    if (has_field_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->field_length());
    }
    
    // required int32 field_width = 3;
    if (has_field_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->field_width());
    }
    
    // required int32 boundary_width = 4;
    if (has_boundary_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->boundary_width());
    }
    
    // required int32 referee_width = 5;
    if (has_referee_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->referee_width());
    }
    
    // required int32 goal_width = 6;
    if (has_goal_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->goal_width());
    }
    
    // required int32 goal_depth = 7;
    if (has_goal_depth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->goal_depth());
    }
    
    // required int32 goal_wall_width = 8;
    if (has_goal_wall_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->goal_wall_width());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 center_circle_radius = 9;
    if (has_center_circle_radius()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->center_circle_radius());
    }
    
    // required int32 defense_radius = 10;
    if (has_defense_radius()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->defense_radius());
    }
    
    // required int32 defense_stretch = 11;
    if (has_defense_stretch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->defense_stretch());
    }
    
    // required int32 free_kick_from_defense_dist = 12;
    if (has_free_kick_from_defense_dist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->free_kick_from_defense_dist());
    }
    
    // required int32 penalty_spot_from_field_line_dist = 13;
    if (has_penalty_spot_from_field_line_dist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->penalty_spot_from_field_line_dist());
    }
    
    // required int32 penalty_line_from_spot_dist = 14;
    if (has_penalty_line_from_spot_dist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->penalty_line_from_spot_dist());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SSL_GeometryFieldSize::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SSL_GeometryFieldSize* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SSL_GeometryFieldSize*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SSL_GeometryFieldSize::MergeFrom(const SSL_GeometryFieldSize& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_line_width()) {
      set_line_width(from.line_width());
    }
    if (from.has_field_length()) {
      set_field_length(from.field_length());
    }
    if (from.has_field_width()) {
      set_field_width(from.field_width());
    }
    if (from.has_boundary_width()) {
      set_boundary_width(from.boundary_width());
    }
    if (from.has_referee_width()) {
      set_referee_width(from.referee_width());
    }
    if (from.has_goal_width()) {
      set_goal_width(from.goal_width());
    }
    if (from.has_goal_depth()) {
      set_goal_depth(from.goal_depth());
    }
    if (from.has_goal_wall_width()) {
      set_goal_wall_width(from.goal_wall_width());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_center_circle_radius()) {
      set_center_circle_radius(from.center_circle_radius());
    }
    if (from.has_defense_radius()) {
      set_defense_radius(from.defense_radius());
    }
    if (from.has_defense_stretch()) {
      set_defense_stretch(from.defense_stretch());
    }
    if (from.has_free_kick_from_defense_dist()) {
      set_free_kick_from_defense_dist(from.free_kick_from_defense_dist());
    }
    if (from.has_penalty_spot_from_field_line_dist()) {
      set_penalty_spot_from_field_line_dist(from.penalty_spot_from_field_line_dist());
    }
    if (from.has_penalty_line_from_spot_dist()) {
      set_penalty_line_from_spot_dist(from.penalty_line_from_spot_dist());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SSL_GeometryFieldSize::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSL_GeometryFieldSize::CopyFrom(const SSL_GeometryFieldSize& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSL_GeometryFieldSize::IsInitialized() const {
  if ((_has_bits_[0] & 0x00003fff) != 0x00003fff) return false;
  
  return true;
}

void SSL_GeometryFieldSize::Swap(SSL_GeometryFieldSize* other) {
  if (other != this) {
    std::swap(line_width_, other->line_width_);
    std::swap(field_length_, other->field_length_);
    std::swap(field_width_, other->field_width_);
    std::swap(boundary_width_, other->boundary_width_);
    std::swap(referee_width_, other->referee_width_);
    std::swap(goal_width_, other->goal_width_);
    std::swap(goal_depth_, other->goal_depth_);
    std::swap(goal_wall_width_, other->goal_wall_width_);
    std::swap(center_circle_radius_, other->center_circle_radius_);
    std::swap(defense_radius_, other->defense_radius_);
    std::swap(defense_stretch_, other->defense_stretch_);
    std::swap(free_kick_from_defense_dist_, other->free_kick_from_defense_dist_);
    std::swap(penalty_spot_from_field_line_dist_, other->penalty_spot_from_field_line_dist_);
    std::swap(penalty_line_from_spot_dist_, other->penalty_line_from_spot_dist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SSL_GeometryFieldSize::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SSL_GeometryFieldSize_descriptor_;
  metadata.reflection = SSL_GeometryFieldSize_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SSL_GeometryCameraCalibration::kCameraIdFieldNumber;
const int SSL_GeometryCameraCalibration::kFocalLengthFieldNumber;
const int SSL_GeometryCameraCalibration::kPrincipalPointXFieldNumber;
const int SSL_GeometryCameraCalibration::kPrincipalPointYFieldNumber;
const int SSL_GeometryCameraCalibration::kDistortionFieldNumber;
const int SSL_GeometryCameraCalibration::kQ0FieldNumber;
const int SSL_GeometryCameraCalibration::kQ1FieldNumber;
const int SSL_GeometryCameraCalibration::kQ2FieldNumber;
const int SSL_GeometryCameraCalibration::kQ3FieldNumber;
const int SSL_GeometryCameraCalibration::kTxFieldNumber;
const int SSL_GeometryCameraCalibration::kTyFieldNumber;
const int SSL_GeometryCameraCalibration::kTzFieldNumber;
const int SSL_GeometryCameraCalibration::kDerivedCameraWorldTxFieldNumber;
const int SSL_GeometryCameraCalibration::kDerivedCameraWorldTyFieldNumber;
const int SSL_GeometryCameraCalibration::kDerivedCameraWorldTzFieldNumber;
#endif  // !_MSC_VER

SSL_GeometryCameraCalibration::SSL_GeometryCameraCalibration()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SSL_GeometryCameraCalibration::InitAsDefaultInstance() {
}

SSL_GeometryCameraCalibration::SSL_GeometryCameraCalibration(const SSL_GeometryCameraCalibration& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SSL_GeometryCameraCalibration::SharedCtor() {
  _cached_size_ = 0;
  camera_id_ = 0u;
  focal_length_ = 0;
  principal_point_x_ = 0;
  principal_point_y_ = 0;
  distortion_ = 0;
  q0_ = 0;
  q1_ = 0;
  q2_ = 0;
  q3_ = 0;
  tx_ = 0;
  ty_ = 0;
  tz_ = 0;
  derived_camera_world_tx_ = 0;
  derived_camera_world_ty_ = 0;
  derived_camera_world_tz_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SSL_GeometryCameraCalibration::~SSL_GeometryCameraCalibration() {
  SharedDtor();
}

void SSL_GeometryCameraCalibration::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SSL_GeometryCameraCalibration::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SSL_GeometryCameraCalibration::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SSL_GeometryCameraCalibration_descriptor_;
}

const SSL_GeometryCameraCalibration& SSL_GeometryCameraCalibration::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_5frobocup_5fssl_5fgeometry_2eproto();  return *default_instance_;
}

SSL_GeometryCameraCalibration* SSL_GeometryCameraCalibration::default_instance_ = NULL;

SSL_GeometryCameraCalibration* SSL_GeometryCameraCalibration::New() const {
  return new SSL_GeometryCameraCalibration;
}

void SSL_GeometryCameraCalibration::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    camera_id_ = 0u;
    focal_length_ = 0;
    principal_point_x_ = 0;
    principal_point_y_ = 0;
    distortion_ = 0;
    q0_ = 0;
    q1_ = 0;
    q2_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    q3_ = 0;
    tx_ = 0;
    ty_ = 0;
    tz_ = 0;
    derived_camera_world_tx_ = 0;
    derived_camera_world_ty_ = 0;
    derived_camera_world_tz_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SSL_GeometryCameraCalibration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 camera_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &camera_id_)));
          set_has_camera_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_focal_length;
        break;
      }
      
      // required float focal_length = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_focal_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &focal_length_)));
          set_has_focal_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_principal_point_x;
        break;
      }
      
      // required float principal_point_x = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_principal_point_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &principal_point_x_)));
          set_has_principal_point_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_principal_point_y;
        break;
      }
      
      // required float principal_point_y = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_principal_point_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &principal_point_y_)));
          set_has_principal_point_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_distortion;
        break;
      }
      
      // required float distortion = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_distortion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &distortion_)));
          set_has_distortion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_q0;
        break;
      }
      
      // required float q0 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_q0:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &q0_)));
          set_has_q0();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_q1;
        break;
      }
      
      // required float q1 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_q1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &q1_)));
          set_has_q1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_q2;
        break;
      }
      
      // required float q2 = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_q2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &q2_)));
          set_has_q2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_q3;
        break;
      }
      
      // required float q3 = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_q3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &q3_)));
          set_has_q3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_tx;
        break;
      }
      
      // required float tx = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_tx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tx_)));
          set_has_tx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(93)) goto parse_ty;
        break;
      }
      
      // required float ty = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ty_)));
          set_has_ty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(101)) goto parse_tz;
        break;
      }
      
      // required float tz = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_tz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tz_)));
          set_has_tz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(109)) goto parse_derived_camera_world_tx;
        break;
      }
      
      // optional float derived_camera_world_tx = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_derived_camera_world_tx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &derived_camera_world_tx_)));
          set_has_derived_camera_world_tx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(117)) goto parse_derived_camera_world_ty;
        break;
      }
      
      // optional float derived_camera_world_ty = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_derived_camera_world_ty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &derived_camera_world_ty_)));
          set_has_derived_camera_world_ty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(125)) goto parse_derived_camera_world_tz;
        break;
      }
      
      // optional float derived_camera_world_tz = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_derived_camera_world_tz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &derived_camera_world_tz_)));
          set_has_derived_camera_world_tz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SSL_GeometryCameraCalibration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 camera_id = 1;
  if (has_camera_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->camera_id(), output);
  }
  
  // required float focal_length = 2;
  if (has_focal_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->focal_length(), output);
  }
  
  // required float principal_point_x = 3;
  if (has_principal_point_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->principal_point_x(), output);
  }
  
  // required float principal_point_y = 4;
  if (has_principal_point_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->principal_point_y(), output);
  }
  
  // required float distortion = 5;
  if (has_distortion()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->distortion(), output);
  }
  
  // required float q0 = 6;
  if (has_q0()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->q0(), output);
  }
  
  // required float q1 = 7;
  if (has_q1()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->q1(), output);
  }
  
  // required float q2 = 8;
  if (has_q2()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->q2(), output);
  }
  
  // required float q3 = 9;
  if (has_q3()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->q3(), output);
  }
  
  // required float tx = 10;
  if (has_tx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->tx(), output);
  }
  
  // required float ty = 11;
  if (has_ty()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->ty(), output);
  }
  
  // required float tz = 12;
  if (has_tz()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->tz(), output);
  }
  
  // optional float derived_camera_world_tx = 13;
  if (has_derived_camera_world_tx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->derived_camera_world_tx(), output);
  }
  
  // optional float derived_camera_world_ty = 14;
  if (has_derived_camera_world_ty()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->derived_camera_world_ty(), output);
  }
  
  // optional float derived_camera_world_tz = 15;
  if (has_derived_camera_world_tz()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->derived_camera_world_tz(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SSL_GeometryCameraCalibration::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 camera_id = 1;
  if (has_camera_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->camera_id(), target);
  }
  
  // required float focal_length = 2;
  if (has_focal_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->focal_length(), target);
  }
  
  // required float principal_point_x = 3;
  if (has_principal_point_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->principal_point_x(), target);
  }
  
  // required float principal_point_y = 4;
  if (has_principal_point_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->principal_point_y(), target);
  }
  
  // required float distortion = 5;
  if (has_distortion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->distortion(), target);
  }
  
  // required float q0 = 6;
  if (has_q0()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->q0(), target);
  }
  
  // required float q1 = 7;
  if (has_q1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->q1(), target);
  }
  
  // required float q2 = 8;
  if (has_q2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->q2(), target);
  }
  
  // required float q3 = 9;
  if (has_q3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->q3(), target);
  }
  
  // required float tx = 10;
  if (has_tx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->tx(), target);
  }
  
  // required float ty = 11;
  if (has_ty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->ty(), target);
  }
  
  // required float tz = 12;
  if (has_tz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->tz(), target);
  }
  
  // optional float derived_camera_world_tx = 13;
  if (has_derived_camera_world_tx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->derived_camera_world_tx(), target);
  }
  
  // optional float derived_camera_world_ty = 14;
  if (has_derived_camera_world_ty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->derived_camera_world_ty(), target);
  }
  
  // optional float derived_camera_world_tz = 15;
  if (has_derived_camera_world_tz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->derived_camera_world_tz(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SSL_GeometryCameraCalibration::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 camera_id = 1;
    if (has_camera_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->camera_id());
    }
    
    // required float focal_length = 2;
    if (has_focal_length()) {
      total_size += 1 + 4;
    }
    
    // required float principal_point_x = 3;
    if (has_principal_point_x()) {
      total_size += 1 + 4;
    }
    
    // required float principal_point_y = 4;
    if (has_principal_point_y()) {
      total_size += 1 + 4;
    }
    
    // required float distortion = 5;
    if (has_distortion()) {
      total_size += 1 + 4;
    }
    
    // required float q0 = 6;
    if (has_q0()) {
      total_size += 1 + 4;
    }
    
    // required float q1 = 7;
    if (has_q1()) {
      total_size += 1 + 4;
    }
    
    // required float q2 = 8;
    if (has_q2()) {
      total_size += 1 + 4;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required float q3 = 9;
    if (has_q3()) {
      total_size += 1 + 4;
    }
    
    // required float tx = 10;
    if (has_tx()) {
      total_size += 1 + 4;
    }
    
    // required float ty = 11;
    if (has_ty()) {
      total_size += 1 + 4;
    }
    
    // required float tz = 12;
    if (has_tz()) {
      total_size += 1 + 4;
    }
    
    // optional float derived_camera_world_tx = 13;
    if (has_derived_camera_world_tx()) {
      total_size += 1 + 4;
    }
    
    // optional float derived_camera_world_ty = 14;
    if (has_derived_camera_world_ty()) {
      total_size += 1 + 4;
    }
    
    // optional float derived_camera_world_tz = 15;
    if (has_derived_camera_world_tz()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SSL_GeometryCameraCalibration::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SSL_GeometryCameraCalibration* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SSL_GeometryCameraCalibration*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SSL_GeometryCameraCalibration::MergeFrom(const SSL_GeometryCameraCalibration& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_camera_id()) {
      set_camera_id(from.camera_id());
    }
    if (from.has_focal_length()) {
      set_focal_length(from.focal_length());
    }
    if (from.has_principal_point_x()) {
      set_principal_point_x(from.principal_point_x());
    }
    if (from.has_principal_point_y()) {
      set_principal_point_y(from.principal_point_y());
    }
    if (from.has_distortion()) {
      set_distortion(from.distortion());
    }
    if (from.has_q0()) {
      set_q0(from.q0());
    }
    if (from.has_q1()) {
      set_q1(from.q1());
    }
    if (from.has_q2()) {
      set_q2(from.q2());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_q3()) {
      set_q3(from.q3());
    }
    if (from.has_tx()) {
      set_tx(from.tx());
    }
    if (from.has_ty()) {
      set_ty(from.ty());
    }
    if (from.has_tz()) {
      set_tz(from.tz());
    }
    if (from.has_derived_camera_world_tx()) {
      set_derived_camera_world_tx(from.derived_camera_world_tx());
    }
    if (from.has_derived_camera_world_ty()) {
      set_derived_camera_world_ty(from.derived_camera_world_ty());
    }
    if (from.has_derived_camera_world_tz()) {
      set_derived_camera_world_tz(from.derived_camera_world_tz());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SSL_GeometryCameraCalibration::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSL_GeometryCameraCalibration::CopyFrom(const SSL_GeometryCameraCalibration& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSL_GeometryCameraCalibration::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000fff) != 0x00000fff) return false;
  
  return true;
}

void SSL_GeometryCameraCalibration::Swap(SSL_GeometryCameraCalibration* other) {
  if (other != this) {
    std::swap(camera_id_, other->camera_id_);
    std::swap(focal_length_, other->focal_length_);
    std::swap(principal_point_x_, other->principal_point_x_);
    std::swap(principal_point_y_, other->principal_point_y_);
    std::swap(distortion_, other->distortion_);
    std::swap(q0_, other->q0_);
    std::swap(q1_, other->q1_);
    std::swap(q2_, other->q2_);
    std::swap(q3_, other->q3_);
    std::swap(tx_, other->tx_);
    std::swap(ty_, other->ty_);
    std::swap(tz_, other->tz_);
    std::swap(derived_camera_world_tx_, other->derived_camera_world_tx_);
    std::swap(derived_camera_world_ty_, other->derived_camera_world_ty_);
    std::swap(derived_camera_world_tz_, other->derived_camera_world_tz_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SSL_GeometryCameraCalibration::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SSL_GeometryCameraCalibration_descriptor_;
  metadata.reflection = SSL_GeometryCameraCalibration_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SSL_GeometryData::kFieldFieldNumber;
const int SSL_GeometryData::kCalibFieldNumber;
#endif  // !_MSC_VER

SSL_GeometryData::SSL_GeometryData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SSL_GeometryData::InitAsDefaultInstance() {
  field_ = const_cast< ::SSL_GeometryFieldSize*>(&::SSL_GeometryFieldSize::default_instance());
}

SSL_GeometryData::SSL_GeometryData(const SSL_GeometryData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SSL_GeometryData::SharedCtor() {
  _cached_size_ = 0;
  field_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SSL_GeometryData::~SSL_GeometryData() {
  SharedDtor();
}

void SSL_GeometryData::SharedDtor() {
  if (this != default_instance_) {
    delete field_;
  }
}

void SSL_GeometryData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SSL_GeometryData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SSL_GeometryData_descriptor_;
}

const SSL_GeometryData& SSL_GeometryData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_5frobocup_5fssl_5fgeometry_2eproto();  return *default_instance_;
}

SSL_GeometryData* SSL_GeometryData::default_instance_ = NULL;

SSL_GeometryData* SSL_GeometryData::New() const {
  return new SSL_GeometryData;
}

void SSL_GeometryData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_field()) {
      if (field_ != NULL) field_->::SSL_GeometryFieldSize::Clear();
    }
  }
  calib_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SSL_GeometryData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .SSL_GeometryFieldSize field = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_field()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_calib;
        break;
      }
      
      // repeated .SSL_GeometryCameraCalibration calib = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_calib:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_calib()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_calib;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SSL_GeometryData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .SSL_GeometryFieldSize field = 1;
  if (has_field()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->field(), output);
  }
  
  // repeated .SSL_GeometryCameraCalibration calib = 2;
  for (int i = 0; i < this->calib_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->calib(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SSL_GeometryData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .SSL_GeometryFieldSize field = 1;
  if (has_field()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->field(), target);
  }
  
  // repeated .SSL_GeometryCameraCalibration calib = 2;
  for (int i = 0; i < this->calib_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->calib(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SSL_GeometryData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .SSL_GeometryFieldSize field = 1;
    if (has_field()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->field());
    }
    
  }
  // repeated .SSL_GeometryCameraCalibration calib = 2;
  total_size += 1 * this->calib_size();
  for (int i = 0; i < this->calib_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->calib(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SSL_GeometryData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SSL_GeometryData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SSL_GeometryData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SSL_GeometryData::MergeFrom(const SSL_GeometryData& from) {
  GOOGLE_CHECK_NE(&from, this);
  calib_.MergeFrom(from.calib_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_field()) {
      mutable_field()->::SSL_GeometryFieldSize::MergeFrom(from.field());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SSL_GeometryData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSL_GeometryData::CopyFrom(const SSL_GeometryData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSL_GeometryData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_field()) {
    if (!this->field().IsInitialized()) return false;
  }
  for (int i = 0; i < calib_size(); i++) {
    if (!this->calib(i).IsInitialized()) return false;
  }
  return true;
}

void SSL_GeometryData::Swap(SSL_GeometryData* other) {
  if (other != this) {
    std::swap(field_, other->field_);
    calib_.Swap(&other->calib_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SSL_GeometryData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SSL_GeometryData_descriptor_;
  metadata.reflection = SSL_GeometryData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
